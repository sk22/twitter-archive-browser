{"version":3,"sources":["components/tweets-loader.js","components/section.js","lib/utils.js","components/form.js","components/tweets-select.js","components/tweets-filter.js","components/tweets-tools.js","components/app.js","index.js"],"names":["ErrorOutput","styled","div","FileInput","input","TweetsLoader","setTweets","useState","error","setError","status","setStatus","tweetJs","setTweetJs","inputRef","createRef","handleTweetJs","jsText","window","YTD","tweet","useEffect","handleTweets","allTweets","Object","keys","flatMap","partName","filter","item","Boolean","map","eval","handleFileChange","a","current","file","files","name","endsWith","reader","FileReader","readAsText","addEventListener","ev","target","result","err","toString","JSZip","loadAsync","zip","async","console","errorMessages","type","ref","onChange","section","css","Section","SectionDivider","hr","SectionHeader","h2","TweetSection","makeCreatedComparator","invert","t1","t2","getTime","Date","created_at","createDateString","d","date","pad","num","length","day","getDate","month","getMonth","year","getFullYear","sortBy","random","tweets","amount","min","max","randomTweets","i","tweetIndex","Math","ceil","floor","splice","push","oldest","sort","slice","newest","likes","Number","favorite_count","sortModes","fn","unixDay","FormRow","AmountRow","DateRange","TweetsSelect","tweetsPerDay","handleLoadTweets","handleQueryTweets","amountState","setAmountState","nonZeroAmountState","setNonZeroAmountState","sortMode","setSortMode","embedTweets","setEmbedTweets","showTweets","setShowTweets","sinceRef","useRef","untilRef","amountRef","setAmount","handleAmountChange","event","valueAsNumber","value","oldestTime","newestTime","sinceTime","setSinceTime","untilTime","setUntilTime","resetTime","set","time","isNaN","amountInRange","useMemo","beginningOfDay","reduce","sum","count","step","htmlFor","id","onClick","mode","checked","queriedTweets","since","valueAsDate","until","sinceDayStart","setUTCHours","untilDayEnd","script","document","createElement","src","head","appendChild","injectScript","StyledInput","TweetsFilter","setFilterText","currentText","setCurrentText","placeholder","TextFormRow","link","location","hostname","pathname","ScriptletBox","disabled","navigator","clipboard","writeText","Margins","TweetsTools","tweetUtils","setTweetUtils","ids","t","blob","Blob","JSON","stringify","fetch","cache","res","text","args","deleteScript","minify","code","utils","deleteTweets","then","alertResponses","join","download","href","URL","createObjectURL","GlobalStyle","createGlobalStyle","Tweet","blockquote","Main","main","Line","SearchBar","label","tweetTypesOptions","regular","replies","retweets","App","setAllTweets","setQueriedTweets","filterText","searchString","setSearchString","customExpression","setCustomExpression","isRegExp","setIsRegExp","caseSensitive","setCaseSensitive","includeTweets","setIncludeTweets","tweetsSorted","regExp","RegExp","hasCustomExpression","trim","func","Function","test","full_text","toLowerCase","compareText","includes","isReply","isRetweet","startsWith","tweetIsRetweet","obj","forEach","createdAt","dateString","isTweetHidden","handleChangeCustomExpression","debounce","handleChangeSearchText","title","o","style","display","className","dangerouslySetInnerHTML","__html","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6430dfa0.chunk.js","sourcesContent":["import JSZip from 'jszip'\nimport React, { createRef, useEffect, useState } from 'react'\nimport styled from 'styled-components'\n\nconst ErrorOutput = styled.div`\n  color: red;\n`\n\nconst FileInput = styled.input`\n  width: 100%;\n`\n\nconst TweetsLoader = ({ setTweets }) => {\n  const [error, setError] = useState(null)\n  const [status, setStatus] = useState(null)\n  const [tweetJs, setTweetJs] = useState(null)\n\n  const inputRef = createRef()\n\n  const handleTweetJs = (jsText) => {\n    window.YTD = { tweet: {} }\n    setStatus('Loading…')\n    setTweetJs(jsText)\n  }\n\n  useEffect(() => {\n    const handleTweets = ({ tweet }) => {\n      const partNames = Object.keys(tweet)\n      const allTweets = partNames\n        .flatMap((partName) => tweet[partName])\n        .filter((item) => Boolean(item.tweet))\n        .map((item) => item.tweet)\n      setTweets(allTweets)\n    }\n    if (tweetJs) {\n      eval(tweetJs) // eslint-disable-line\n      handleTweets(window.YTD)\n      setStatus(null)\n      setTweetJs(null)\n    }\n  }, [tweetJs, setTweets])\n\n  const handleFileChange = async () => {\n    setError(null)\n    setTweets([])\n    setStatus('Reading…')\n    if (inputRef.current) {\n      const file = inputRef.current.files[0]\n      if (file && file.name.endsWith('.js')) {\n        const reader = new FileReader()\n        reader.readAsText(file, 'utf-8')\n        reader.addEventListener('load', (ev) => {\n          handleTweetJs(ev.target.result)\n        })\n        reader.addEventListener('error', (err) => {\n          setError(['file', err.toString()])\n          setStatus(null)\n        })\n      } else if (file && file.name.endsWith('.zip')) {\n        try {\n          const zip = await JSZip.loadAsync(file)\n          const files = zip.file(/data\\/tweet.js/)\n          const tweetJs = await files[0].async('string')\n          handleTweetJs(tweetJs)\n        } catch (err) {\n          setError(['zip', err.toString()])\n          console.error(err)\n          setStatus(null)\n        }\n      }\n    }\n  }\n\n  const errorMessages = {\n    zip: () => (\n      <p>\n        Could not read the ZIP archive or its contained <code>tweet.js</code>{' '}\n        file. The ZIP file might be too big – maybe try manually extracting the\n        tweet.js file from the archive ZIP's <code>data</code> subdirectory and\n        using it directly.\n      </p>\n    ),\n    file: () => <p>An error occured while trying to read the file.</p>\n  }\n\n  return (\n    <>\n      <FileInput type=\"file\" ref={inputRef} onChange={handleFileChange} />\n      {error && (\n        <ErrorOutput>\n          {errorMessages[error[0]]()}\n          <pre>{error[1]}</pre>\n        </ErrorOutput>\n      )}\n      {status && <p>{status}</p>}\n    </>\n  )\n}\n\nexport default TweetsLoader\n","import styled, { css } from 'styled-components'\n\nconst section = css`\n  width: 100%;\n  padding: 1.5rem;\n  background: white;\n  border-radius: 0.5rem;\n  border: var(--border);\n  margin: 10px 0;\n\n  & > p:last-child {\n    margin-bottom: 0;\n  }\n\n  & > p:first-child {\n    margin-top: 0;\n  }\n`\n\nconst Section = styled.section`\n  ${section}\n`\n\nexport const SectionDivider = styled.hr`\n  border: var(--border);\n  border-top: none;\n  width: calc(100% + 2 * 1.5rem);\n  margin: 1rem 0;\n  margin-left: -1.5rem;\n`\n\nexport const SectionHeader = styled.h2`\n  text-transform: uppercase;\n  font-size: 0.9rem;\n  font-weight: bold;\n  margin: 0;\n  margin-bottom: 1rem;\n`\n\nexport const TweetSection = styled.section`\n  width: 100%;\n  & > .twitter-tweet:not(.twitter-tweet-rendered) {\n    ${section}\n    margin-left: 0;\n    p {\n      margin-top: 0;\n    }\n  }\n`\n\nexport default Section\n","/**\n * Returns a random integer between min (inclusive) and max (inclusive).\n * The value is no lower than min (or the next integer greater than min\n * if min isn't an integer) and no greater than max (or the next integer\n * lower than max if max isn't an integer).\n * Using Math.round() will give you a non-uniform distribution!\n */\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min)\n  max = Math.floor(max)\n  return Math.floor(Math.random() * (max - min + 1)) + min\n}\n\nconst makeCreatedComparator =\n  (invert = false) =>\n  (t1, t2) => {\n    const getTime = (tweet) => new Date(tweet.created_at).getTime()\n    return getTime(invert ? t2 : t1) - getTime(invert ? t1 : t2)\n  }\n\nexport const createDateString = (d) => {\n  const date = d instanceof Date ? d : new Date(d)\n  const pad = (num) =>\n    num.toString().length === 1 ? `0${num}` : num.toString()\n  const day = date.getDate()\n  const month = date.getMonth() + 1\n  const year = date.getFullYear()\n  return `${year}-${pad(month)}-${pad(day)}`\n}\n\nexport const createDayString = (createdAt) =>\n  createdAt.slice(4, 11) + createdAt.slice(-4)\n\nexport const sortBy = {\n  random: (tweets, amount) => {\n    const randomTweets = []\n    for (let i = 0; i < amount && i < tweets.length; i++) {\n      const tweetIndex = getRandomInt(0, tweets.length - 1)\n      const tweet = tweets.splice(tweetIndex, 1)[0]\n      randomTweets.push(tweet)\n    }\n    return randomTweets\n  },\n  oldest: (tweets, amount) =>\n    tweets.sort(makeCreatedComparator()).slice(0, amount),\n  newest: (tweets, amount) =>\n    tweets.sort(makeCreatedComparator(true)).slice(0, amount),\n  likes: (tweets, amount) =>\n    tweets\n      .sort((t1, t2) => Number(t2.favorite_count) - Number(t1.favorite_count))\n      .slice(0, amount)\n}\n\nexport const sortModes = {\n  newest: { name: 'Newest', fn: sortBy.newest },\n  oldest: { name: 'Oldest', fn: sortBy.oldest },\n  random: { name: 'Random', fn: sortBy.random },\n  likes: { name: 'Likes', fn: sortBy.likes }\n}\n\nexport function injectScript() {\n  const script = document.createElement('script')\n  script.src = 'https://platform.twitter.com/widgets.js'\n  document.head.appendChild(script)\n  return script\n}\n\nexport const unixDay = 1000 * 60 * 60 * 24\n","import styled from 'styled-components'\n\nexport const FormRow = styled.div`\n  display: flex;\n  align-items: center;\n  margin: 0.8rem 0;\n\n  & > * + * {\n    margin-left: 0.5rem;\n  }\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n`\n","import React, { useEffect, useMemo, useRef, useState } from 'react'\nimport {\n  injectScript,\n  createDateString,\n  sortModes,\n  unixDay\n} from '../lib/utils'\nimport styled from 'styled-components'\nimport { FormRow } from './form'\nimport { SectionDivider } from './section'\n\nconst AmountRow = styled(FormRow)`\n  & > input[type='number'] {\n    width: 5rem;\n  }\n\n  & > input[type='range'] {\n    flex: 1;\n    width: 100%;\n  }\n`\n\nconst DateRange = styled.input`\n  width: 100%;\n`\n\nconst TweetsSelect = ({\n  tweets,\n  tweetsPerDay,\n  handleQueryTweets: handleLoadTweets\n}) => {\n  const [amountState, setAmountState] = useState(1)\n  const [nonZeroAmountState, setNonZeroAmountState] = useState(1)\n  const [sortMode, setSortMode] = useState('newest')\n  const [embedTweets, setEmbedTweets] = useState(true)\n  const [showTweets, setShowTweets] = useState(true)\n\n  const sinceRef = useRef()\n  const untilRef = useRef()\n  const amountRef = useRef()\n\n  const setAmount = (amount) => {\n    setAmountState(amount)\n    if (amount > 0) setNonZeroAmountState(amount)\n    setEmbedTweets(amount < 30)\n    setShowTweets(amount < 100)\n  }\n\n  const handleAmountChange = (event) =>\n    setAmount(event.target.valueAsNumber || Number(event.target.value))\n\n  const oldestTime = new Date(tweets[0].created_at).getTime()\n  const newestTime = new Date(tweets[tweets.length - 1].created_at).getTime()\n\n  const [sinceTime, setSinceTime] = useState(oldestTime)\n  const [untilTime, setUntilTime] = useState(newestTime)\n\n  const resetTime = (set, time, resetTime) => isNaN(time) && set(resetTime)\n\n  useEffect(\n    () => resetTime(setSinceTime, sinceTime, oldestTime),\n    [sinceTime, oldestTime]\n  )\n\n  useEffect(\n    () => resetTime(setUntilTime, untilTime, newestTime),\n    [untilTime, newestTime]\n  )\n\n  const amountInRange = useMemo(() => {\n    const isDayInRange = (day) => {\n      const beginningOfDay = new Date(day).getTime()\n      return (\n        beginningOfDay + unixDay >= sinceTime &&\n        beginningOfDay - unixDay <= untilTime\n      )\n    }\n    return Object.keys(tweetsPerDay)\n      .filter(isDayInRange)\n      .map((day) => tweetsPerDay[day])\n      .reduce((sum, count) => sum + count, 0)\n  }, [tweetsPerDay, sinceTime, untilTime])\n\n  useEffect(() => {\n    if (amountInRange < amountState) {\n      setAmount(amountInRange)\n    }\n    if (amountState === 0 && amountInRange > 0) {\n      setAmount(nonZeroAmountState)\n    }\n  }, [amountInRange, amountState, nonZeroAmountState])\n\n  useEffect(() => {\n    if (oldestTime > sinceRef.current.valueAsNumber) setSinceTime(oldestTime)\n  }, [oldestTime])\n\n  useEffect(() => {\n    if (newestTime < untilRef.current.valueAsNumber) setUntilTime(newestTime)\n  }, [newestTime])\n\n  const handleClickQuery = () => {\n    const queriedTweets = tweets.filter((tweet) => {\n      const since = sinceRef.current.valueAsDate\n      const until = untilRef.current.valueAsDate\n      if (!since || !until) return false\n\n      const date = new Date(tweet.created_at)\n      const sinceDayStart = new Date(since.getTime())\n      sinceDayStart.setUTCHours(0, 0, 0, 0)\n      const untilDayEnd = new Date(until.getTime() + unixDay)\n      untilDayEnd.setUTCHours(0, 0, 0, 0)\n\n      if (sinceDayStart.getTime() >= date.getTime()) return false\n      if (untilDayEnd.getTime() <= date.getTime()) return false\n      return true\n    })\n\n    handleLoadTweets(\n      sortModes[sortMode].fn(queriedTweets, amountState),\n      showTweets\n    )\n    if (embedTweets) injectScript()\n  }\n\n  return (\n    <>\n      <label>\n        Since{' '}\n        <input\n          type=\"date\"\n          value={createDateString(sinceTime || oldestTime)}\n          ref={sinceRef}\n          onChange={(event) => setSinceTime(event.target.valueAsNumber)}\n        />\n      </label>\n      <DateRange\n        type=\"range\"\n        min={oldestTime}\n        max={newestTime}\n        value={sinceTime || oldestTime}\n        step={unixDay}\n        onChange={(event) => setSinceTime(Number(event.target.value))}\n      />\n      <label>\n        Until{' '}\n        <input\n          type=\"date\"\n          value={createDateString(untilTime || newestTime)}\n          ref={untilRef}\n          onChange={(event) => setUntilTime(event.target.valueAsNumber)}\n        />\n      </label>\n      <DateRange\n        type=\"range\"\n        min={oldestTime}\n        max={newestTime}\n        value={untilTime || newestTime}\n        step={unixDay}\n        onChange={(event) => {\n          setUntilTime(Number(event.target.value))\n        }}\n      />\n      <SectionDivider />\n      <AmountRow htmlFor=\"amount\">\n        <label htmlFor=\"amount\">Amount:</label>\n        <input\n          type=\"number\"\n          id=\"amount\"\n          min={amountInRange > 0 ? 1 : 0}\n          max={amountInRange}\n          step=\"1\"\n          value={amountState}\n          onChange={handleAmountChange}\n        />\n        <p>out&nbsp;of</p>\n        <button onClick={() => setAmount(amountInRange)}>\n          all {amountInRange}\n        </button>\n        <input\n          type=\"range\"\n          min={amountInRange > 0 ? 1 : 0}\n          max={Math.min(amountInRange, 99)}\n          value={amountState}\n          ref={amountRef}\n          onChange={handleAmountChange}\n        />\n      </AmountRow>\n      <SectionDivider />\n      <FormRow>\n        <span>Sort by</span>\n        {Object.keys(sortModes).map((mode, i) => (\n          <label htmlFor={`query-${mode}`} key={`${i}-${mode}`}>\n            <input\n              type=\"radio\"\n              id={`query-${mode}`}\n              name=\"query-type\"\n              onChange={() => setSortMode(mode)}\n              value={mode}\n              checked={sortMode === mode}\n            />\n            {sortModes[mode].name}\n          </label>\n        ))}\n      </FormRow>\n      <SectionDivider />\n      <FormRow>\n        <input type=\"submit\" onClick={handleClickQuery} value=\"Query\" />\n        <label htmlFor=\"show-tweets\">\n          <input\n            id=\"show-tweets\"\n            type=\"checkbox\"\n            checked={showTweets}\n            onChange={(event) => setShowTweets(Boolean(event.target.checked))}\n          />{' '}\n          Show tweets\n        </label>{' '}\n        <label htmlFor=\"embed-tweets\">\n          <input\n            id=\"embed-tweets\"\n            type=\"checkbox\"\n            checked={embedTweets}\n            onChange={(event) => setEmbedTweets(Boolean(event.target.checked))}\n          />{' '}\n          Embed tweets\n        </label>\n      </FormRow>\n    </>\n  )\n}\n\nexport default TweetsSelect\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\n\nconst StyledInput = styled.input`\n  width: 100%;\n  margin-bottom: 1rem;\n`\n\nconst TweetsFilter = ({ setFilterText }) => {\n  const [currentText, setCurrentText] = useState('')\n\n  const handleChange = (event) => {\n    setCurrentText(event.target.value)\n    setFilterText(event.target.value)\n  }\n\n  return (\n    <StyledInput\n      type=\"text\"\n      value={currentText}\n      onChange={handleChange}\n      placeholder=\"Type to filter…\"\n    />\n  )\n}\n\nexport default TweetsFilter\n","import React, { useEffect, useRef, useState } from 'react'\nimport styled from 'styled-components'\nimport { minify } from 'terser'\nimport { FormRow } from './form'\nimport { SectionDivider, SectionHeader } from './section'\n\nconst TextFormRow = styled(FormRow)`\n  & > input {\n    flex: 1;\n    width: 100%;\n  }\n`\n\nconst link = window.location.hostname + window.location.pathname\n\nconst ScriptletBox = ({ value, name }) => {\n  const inputRef = useRef()\n  return (\n    <TextFormRow>\n      <div>{name}:</div>\n      <input type=\"text\" disabled={true} ref={inputRef} value={value} />\n      <button\n        onClick={() => navigator.clipboard.writeText(inputRef.current.value)}\n      >\n        Copy\n      </button>\n    </TextFormRow>\n  )\n}\n\n// const TweetJSON = styled.pre`\n//   overflow-x: scroll;\n//   background: #eee;\n//   padding: 1rem;\n//   border-radius: 0.5rem;\n// `\n\nconst Margins = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n\n  & > * + * {\n    margin-top: 0.5rem;\n  }\n`\n\nconst TweetsTools = ({ tweets }) => {\n  const [tweetUtils, setTweetUtils] = useState(null)\n\n  const ids = tweets.map((t) => t.id)\n  // const fields = useMemo(() => {\n  //   let fs = []\n  //   tweets.forEach(tweet => {\n  //     Object.keys(tweet).forEach(f => {\n  //       if (!fs.includes(f)) fs.push(f)\n  //     })\n  //   })\n  //   return fs\n  // }, [tweets])\n  const blob = new Blob([JSON.stringify(tweets, null, 2)], {\n    type: 'application/json'\n  })\n\n  const min = (args) => (fn) => {\n    const { code, error } = minify(\n      `(${tweetUtils})(${fn}, ${JSON.stringify(args)})`\n    )\n    return error ? error.toString() : `${code} /* via ${link} */`\n  }\n\n  useEffect(() => {\n    ;(async () => {\n      const res = await fetch(`${window.location.pathname}/tweet-utils.js`, {\n        cache: 'reload'\n      })\n      const tweetUtils = await res.text()\n      setTweetUtils(tweetUtils)\n    })()\n  }, [])\n\n  const deleteScript = min({ ids })((utils, { ids }) =>\n    utils.deleteTweets(ids).then(utils.alertResponses)\n  )\n\n  return (\n    <Margins>\n      <TextFormRow>\n        <div>Tweet IDs:</div>\n        <input type=\"text\" disabled={true} value={ids.join(',')} />\n      </TextFormRow>\n      {tweetUtils ? (\n        <>\n          <small>\n            Copy one of these scripts into your Twitter tab's browser console\n            (Chrome and Firefox: CTRL/CMD+Shift+I, then click on \"Console\")\n          </small>\n          <ScriptletBox name=\"Delete tweets\" value={deleteScript} />\n        </>\n      ) : (\n        <p>Tweet utils loading…</p>\n      )}\n      <SectionDivider />\n      <SectionHeader>Download data</SectionHeader>\n      {/* {fields.map(field => <label key={field}>\n        <input type=\"checkbox\" />\n        {field}\n      </label>)} */}\n      <a download=\"tweets.json\" href={URL.createObjectURL(blob)}>\n        Download queried tweets as JSON\n      </a>\n      {/* For reference, the first resulting tweet contains this data:\n      <TweetJSON>{JSON.stringify(tweets[0], null, 2)}</TweetJSON> */}\n    </Margins>\n  )\n}\n\nexport default TweetsTools\n","import React, { useMemo, useRef, useState } from 'react'\nimport styled, { createGlobalStyle } from 'styled-components'\nimport Section, { SectionDivider, SectionHeader, TweetSection } from './section'\nimport TweetsLoader from './tweets-loader'\nimport TweetsSelect from './tweets-select'\nimport TweetsFilter from './tweets-filter'\nimport { createDayString, sortModes } from '../lib/utils'\nimport { FormRow } from './form'\nimport { debounce } from 'lodash'\nimport TweetsTools from './tweets-tools'\n\nconst GlobalStyle = createGlobalStyle`\n  html, body, #root {\n    height: 100%;\n    margin: 0;\n    font-family: sans-serif;\n  }\n\n  * {\n    box-sizing: border-box;\n  }\n\n  :root {\n    --border: 1px solid #ccc;\n    --border-strong: 1.3px solid #666;\n  }\n`\n\nconst Tweet = styled.blockquote`\n  white-space: pre-wrap;\n  word-break: break-word;\n`\n\nconst Main = styled.main`\n  display: flex;\n  flex-direction: column;\n  width: 35rem;\n  margin: 0 auto;\n  max-width: 100%;\n  align-items: center;\n  padding: 1rem;\n  padding-top: 2rem;\n\n  & > input {\n    width: 100%;\n  }\n`\n\nconst Line = styled.hr`\n  border: none;\n  border-top: var(--border-strong);\n  width: 60%;\n  margin: 1.5rem;\n`\n\nconst SearchBar = styled.label`\n  display: flex;\n  width: 100%;\n  align-items: baseline;\n  & > input {\n    margin-left: 0.5rem;\n    flex: 1;\n  }\n`\n\nconst tweetTypesOptions = {\n  regular: 'Regular tweets',\n  replies: 'Replies',\n  retweets: 'Retweets'\n}\n\nconst App = () => {\n  const [allTweets, setAllTweets] = useState([])\n  const [queriedTweets, setQueriedTweets] = useState([])\n  const [filterText, setFilterText] = useState('')\n  const [showTweets, setShowTweets] = useState(true)\n  const [searchString, setSearchString] = useState('')\n  const [customExpression, setCustomExpression] = useState('')\n  const [isRegExp, setIsRegExp] = useState(false)\n  const [caseSensitive, setCaseSensitive] = useState(false)\n  const [error, setError] = useState(null)\n  const [includeTweets, setIncludeTweets] = useState({\n    regular: true,\n    replies: true,\n    retweets: true\n  })\n\n  const tweetsSorted = useMemo(\n    () => sortModes.oldest.fn(allTweets),\n    [allTweets]\n  )\n\n  const tweetIsRetweet = (tweet) => tweet.full_text.startsWith('RT @')\n  const tweetIsReply = (tweet) => 'in_reply_to_screen_name' in tweet\n\n  const tweets = useMemo(() => {\n    try {\n      const regExp = isRegExp\n        ? new RegExp(searchString, caseSensitive ? '' : 'i')\n        : null\n      const hasCustomExpression = customExpression.trim().length > 0\n      if (isRegExp || hasCustomExpression) setError(null)\n      const func = hasCustomExpression\n        ? // eslint-disable-next-line\n          new Function('t', `return ${customExpression}`)\n        : null\n      return tweetsSorted\n        .filter((tweet) => {\n          if (isRegExp) {\n            return regExp.test(tweet.full_text)\n          } else {\n            const text = caseSensitive\n              ? tweet.full_text\n              : tweet.full_text.toLowerCase()\n            const compareText = caseSensitive\n              ? searchString\n              : searchString.toLowerCase()\n            return text.includes(compareText)\n          }\n        })\n        .filter((t) => {\n          const isReply = tweetIsReply(t)\n          const isRetweet = tweetIsRetweet(t)\n          const isRegular = !isReply && !isRetweet\n\n          return (\n            (isRegular && includeTweets.regular) ||\n            (isReply && includeTweets.replies) ||\n            (isRetweet && includeTweets.retweets)\n          )\n        })\n        .filter((t) => {\n          return hasCustomExpression ? func(t) : true\n        })\n    } catch (err) {\n      setError(err.toString())\n      return []\n    }\n  }, [\n    tweetsSorted,\n    searchString,\n    caseSensitive,\n    isRegExp,\n    includeTweets,\n    customExpression\n  ])\n\n  const tweetsPerDay = useMemo(() => {\n    const obj = {}\n    tweets.forEach((tweet) => {\n      const dateString = createDayString(tweet.created_at)\n      obj[dateString] = (obj[dateString] || 0) + 1\n    })\n    return obj\n  }, [tweets])\n\n  const isTweetHidden = (tweet) =>\n    !tweet.full_text.toLowerCase().includes(filterText.toLowerCase())\n\n  const handleChangeCustomExpression = useRef(\n    debounce((event) => setCustomExpression(event.target.value), 600)\n  ).current\n\n  const handleChangeSearchText = useRef(\n    debounce((event) => setSearchString(event.target.value), 600)\n  ).current\n\n  return (\n    <Main>\n      <GlobalStyle />\n      <Section>\n        <SectionHeader>Load Tweet archive</SectionHeader>\n        {allTweets.length === 0 && (\n          <>\n            <p>\n              Use the file picker to upload your Twitter archive ZIP file, or\n              just the contained <code>tweet.js</code> file.\n            </p>\n            <p>\n              If you don't have a Twitter archive yet, you can request and\n              download it in your{' '}\n              <a href=\"https://twitter.com/settings/download_your_data\">\n                Twitter settings\n              </a>\n              . In this case, see you in a few hours! (Or days, depending on\n              your Twitter usage)\n            </p>\n          </>\n        )}\n        <TweetsLoader setTweets={setAllTweets} />\n        {allTweets.length > 0 && (\n          <p>{allTweets.length} tweets loaded</p>\n        )}\n      </Section>\n      {allTweets.length > 0 && (\n        <>\n          <Section>\n            <SectionHeader>Query tweets</SectionHeader>\n            <FormRow>\n              <SearchBar>\n                Search{' '}\n                <input\n                  type=\"text\"\n                  placeholder={\n                    isRegExp\n                      ? 'Enter a regular expression, e.g. ^Hello, .+!$'\n                      : 'Enter text…'\n                  }\n                  onChange={handleChangeSearchText}\n                />\n              </SearchBar>\n            </FormRow>\n            <FormRow>\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={isRegExp}\n                  onChange={(event) =>\n                    Boolean(setIsRegExp(event.target.checked))\n                  }\n                />{' '}\n                <abbr\n                  title={\n                    'Advanced. Lets you define a regular expression, ' +\n                    'allowing to search for more specific text patterns.'\n                  }\n                >\n                  Regular expression\n                </abbr>\n              </label>\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={caseSensitive}\n                  onChange={(event) =>\n                    Boolean(setCaseSensitive(event.target.checked))\n                  }\n                />{' '}\n                <abbr\n                  title={\n                    'Case sensitive search makes the search sensitive to ' +\n                    'lower- and uppercase letters, such as \"a\" and \"A\"'\n                  }\n                >\n                  Case sensitive\n                </abbr>\n              </label>\n            </FormRow>\n            <SectionDivider />\n            <SearchBar>\n              <abbr\n                title={\n                  'Advanced. Optionally provide a JavaScript expression to ' +\n                  'filter tweets. The tweet object is provided as variable \"' +\n                  't\" and the expression can be as simple as \"true\" or \"false\".'\n                }\n              >\n                JavaScript\n              </abbr>{' '}\n              <input\n                type=\"text\"\n                placeholder={\n                  \"Optional; example: t.in_reply_to_user_id !== '12345'\"\n                }\n                onChange={handleChangeCustomExpression}\n              />\n            </SearchBar>\n            <SectionDivider />\n            <FormRow>\n              <span>Include</span>\n              {Object.keys(tweetTypesOptions).map((mode) => (\n                <label key={mode}>\n                  <input\n                    type=\"checkbox\"\n                    name=\"replies\"\n                    onChange={(event) =>\n                      setIncludeTweets((o) => ({\n                        ...o,\n                        [mode]: event.target.checked\n                      }))\n                    }\n                    checked={includeTweets[mode]}\n                  />{' '}\n                  {tweetTypesOptions[mode]}\n                </label>\n              ))}\n            </FormRow>\n            <SectionDivider />\n            {tweets.length > 0 ? (\n              <TweetsSelect\n                tweets={tweets}\n                tweetsPerDay={tweetsPerDay}\n                handleQueryTweets={(t, showTweets) => {\n                  setQueriedTweets(t)\n                  setShowTweets(showTweets)\n                }}\n              />\n            ) : (\n              <p>{error || 'No matching tweets found'}</p>\n            )}\n          </Section>\n        </>\n      )}\n      {queriedTweets.length > 0 && (\n        <>\n          {showTweets && (\n            <>\n              <Line />\n              <TweetsFilter\n                filterText={filterText}\n                setFilterText={(text) => setFilterText(text)}\n              />\n            </>\n          )}\n          {showTweets &&\n            queriedTweets.map((tweet) => (\n              <TweetSection\n                key={tweet.id}\n                style={isTweetHidden(tweet) ? { display: 'none' } : {}}\n              >\n                <Tweet className=\"twitter-tweet\">\n                  <p dangerouslySetInnerHTML={{ __html: tweet.full_text }} />\n                  <a href={`https://twitter.com/_/status/${tweet.id}`}>\n                    {tweet.created_at}\n                  </a>\n                </Tweet>\n              </TweetSection>\n            ))}\n          <Line />\n          <Section>\n            <SectionHeader>Tweet utils</SectionHeader>\n            <TweetsTools tweets={queriedTweets} />\n          </Section>\n        </>\n      )}\n    </Main>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './components/app'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}